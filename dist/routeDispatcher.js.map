{
  "version": 3,
  "sources": ["../src/routeDispatcher.ts"],
  "sourcesContent": ["/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\n// Example routes\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n    },\n    '/contact/*': () => {\n        console.log('This is the contact page.');\n    },\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}"],
  "mappings": ";;AAyBO,MAAM,kBAAN,MAAsB;AAAA,IAIzB,cAAc;AAAA,IAEd;AAAA,IAEA,WAAW,MAAmC;AAC1C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,gBAAgB;AACZ,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,UAAU,KAAK,WAAW,IAAI;AACpC,UAAI,SAAS;AACT,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ,IAAI,qCAAqC;AAAA,MAErD;AAAA,IACJ;AAAA,EAGJ;",
  "names": []
}
